@page "/admin/adduser"
@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar snackbar

<h2>Add user</h2>

<MudSelect @bind-Value="accountType" Label="Account Type" Variant="Variant.Outlined" id="textFieldColor" Style="@theme.textFieldColor">
    @foreach (var x in type)
    {
        <MudSelectItem Style="@theme.selectFieldColor"  Value="@x"></MudSelectItem Style="@theme.selectFieldColor" >
    }
</MudSelect>

<MudTextField @bind-Value="address" Label="Address" Variant="Variant.Outlined" id="textFieldColor" Style="@theme.textFieldColor"></MudTextField>

<MudTextField @bind-Value="advisor" Label="Advisor ID" Variant="Variant.Outlined" id="textFieldColor" Style="@theme.textFieldColor"></MudTextField>

<MudDatePicker @bind-Value="birthday" Label="Birthday" Variant="Variant.Outlined" id="textFieldColor" Style="@theme.textFieldColor"></MudDatePicker>

<MudSelect @bind-Value="department" T="string" Label="Department" id="textFieldColor" AnchorOrigin="Origin.BottomCenter">
    @foreach (var x in departments)
    {
        <MudSelectItem Style="@theme.selectFieldColor" Value="@x"></MudSelectItem Style="@theme.selectFieldColor" >
    }
</MudSelect>


<MudTextField @bind-Value="email" Label="Email" Variant="Variant.Outlined" id="textFieldColor"></MudTextField>
<MudTextField @bind-Value="firstName" Label="First Name" Variant="Variant.Outlined" id="textFieldColor" Style="@theme.textFieldColor"></MudTextField>
<MudTextField @bind-Value="lastName" Label="Last Name" Variant="Variant.Outlined" id="textFieldColor" Style="@theme.textFieldColor"></MudTextField>


<MudSelect @bind-Value="major" T="string" Label="Major" id="textFieldColor" AnchorOrigin="Origin.BottomCenter">
    @foreach (var x in majors)
    {
        <MudSelectItem Style="@theme.selectFieldColor"  Value="@x"></MudSelectItem Style="@theme.selectFieldColor" >
    }
</MudSelect>

<MudSelect @bind-Value="minor" T="string" Label="Minors" id="textFieldColor" AnchorOrigin="Origin.BottomCenter">
    @foreach (var x in minors)
    {
        <MudSelectItem Style="@theme.selectFieldColor"  Value="@x"></MudSelectItem Style="@theme.selectFieldColor" >
    }
</MudSelect>

<MudSelect @bind-Value="partOrFullTime" T="string" Label="Part or Full Time" id="textFieldColor" AnchorOrigin="Origin.BottomCenter">
    @foreach (var x in partOrFullTimeChoices)
    {
        <MudSelectItem Style="@theme.selectFieldColor" id="textFieldColor" Value="@x"></MudSelectItem">
    }
</MudSelect>

<MudTextField @bind-Value="phoneNumber" InputType="InputType.Telephone" Label="Phone Number" id="textFieldColor" Mask="@(new PatternMask("000-000-0000"))" MaxLength="10"></MudTextField>

<MudButton @onclick="submitForm" Variant="Variant.Outlined" class="btncolor">submit</MudButton>

@code 
{
    Mongo mongo = new Mongo("college-site-2");
    Theme theme = new Theme();

    private List<string> departments = new List<string> { };
    private List<string> advisors = new List<string> { };
    private List<string> majors = new List<string> { };
    private List<string> minors = new List<string> { };
    private string[] type = { "Undergraduate", "Graduate", "Faculty", "Admin"  };
    private string[] partOrFullTimeChoices = { "Part Time", "Full Time" };
    private string[] userIDIdentifierChoices = { "ACC10", "FCC10", "SCC10" };

    //field variables
    private static string accountType { get; set; }
    private static string address { get; set; }
    private static string advisor { get; set; }
    private static DateTime birthday { get; set; }
    private static string department { get; set; }
    private static string email{ get; set; }
    private static string firstName { get; set; }
    private static string lastName { get; set; }
    private static string major { get; set; }
    private static string minor { get; set; }
    private static string partOrFullTime { get; set; }
    private static string phoneNumber { get; set; }

    //private static string userIDIdentifier { get; set; }
    //private static string userID { get; set; }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            var accountTypeCheck = await storage.GetAsync<string>("accountType");

            if (accountTypeCheck.Value != "Admin")
            {
                navigate.NavigateTo("/homepage");
            }
        }
        catch
        {
            navigate.NavigateTo("/homepage");
        }

        var queryDepartment = mongo.LoadRecordSortedAsc<Departments>("department", "Department");
        var queryMajors = mongo.LoadRecordSortedAsc<Majors>("majors", "Major");
        var queryMinors = mongo.LoadRecordSortedAsc<Minors>("minors", "Minor");

        foreach (var x in queryDepartment)
        {
            departments.Add(x.Department);
        }

        foreach (var x in queryMajors)
        {
            majors.Add(x.Major);
        }

        minors.Add("None");
        foreach (var x in queryMinors)
        {
            minors.Add(x.Minor);
        }

    }

    private void submitForm()
    {
        try
        {
            bool validForm = true;

            //form validation
            if (accountType == null || accountType == "")
            {
                validForm = false;
                Console.WriteLine("1");
            }
            else if (address == null || address == "")
            {
                validForm = false;
                Console.WriteLine("1");
            }
            else if (advisor == null || advisor == "")
            {
                validForm = false;
                Console.WriteLine("1");
            }
            else if (birthday == null)
            {
                validForm = false;
                Console.WriteLine("1");
            }
            else if ((department == null || department == "") && (accountType == "Undergraduate" || accountType == "Graduate"))
            {
                validForm = false;
                Console.WriteLine("1");
            }
            else if (email == null || email == "")
            {
                validForm = false;
                Console.WriteLine("1");
            }
            else if (firstName == null || firstName == "")
            {
                validForm = false;
                Console.WriteLine("1");
            }
            else if (lastName == null || lastName == "")
            {
                validForm = false;
                Console.WriteLine("1");
            }
            else if (major == null || major == "" && (accountType == "Admin" || accountType == "Faculty"))
            {
                validForm = false;
                Console.WriteLine("1");
            }
            else if (partOrFullTime == null || partOrFullTime == "")
            {
                validForm = false;
                Console.WriteLine("1");
            }
            else if (phoneNumber == null || !(phoneNumber.ToString().Length == 12))
            {
                validForm = false;
                Console.WriteLine("1");
            }

            //sanity check
            bool sanityCheck = true;
            string checkEmail = $"{firstName[0]}{lastName}@clearwater.edu";
            string generatedUserID = "";
            if (validForm)
            {
                Console.WriteLine("validform");
                var queryAllUser = mongo.LoadRecord<AllUser>("allUser");

                foreach (var x in queryAllUser)
                {
                    if (x.PhoneNumber == phoneNumber)
                    {
                        sanityCheck = false;
                        Console.WriteLine("2");
                    }
                    else if (x.Email == email)
                    {
                        sanityCheck = false;
                        Console.WriteLine("2");
                    }
                }

                int userIDValue = 1000;
                string userIDIdentifier = "";

                if (accountType == "Admin")
                {
                    userIDIdentifier = "ACC";
                }
                else if (accountType == "Faculty")
                {
                    userIDIdentifier = "FCC";
                }
                else if (accountType == "Undergraduate" || accountType == "Graduate")
                {
                    userIDIdentifier = "SCC";
                }
                Console.WriteLine("3");

                //i think this section is right -Nick
                bool userIDCheck = true;
                generatedUserID = $"{userIDIdentifier}{userIDValue}";

                while (userIDCheck)
                {
                    foreach (var x in queryAllUser)
                    {
                        if (!(x.UserID == generatedUserID))
                        {
                            userIDCheck = false;
                            break;
                            Console.WriteLine("4");
                        }

                    }
                    Console.WriteLine("5");
                    userIDValue++;
                    generatedUserID = $"{userIDIdentifier}{userIDValue}";
                    Console.WriteLine("6");
                }


            }

            if (validForm && sanityCheck)
            {
                Console.WriteLine("7");

                if (accountType == "Undergraduate" || accountType == "Graduate")
                {
                    AllUser toWrite = new AllUser();

                    toWrite.AccountType = accountType;
                    toWrite.Address = address;
                    toWrite.Advisor = advisor;
                    toWrite.Birthday = birthday;
                    toWrite.Department = department;
                    toWrite.Email = email;
                    toWrite.FirstName = firstName;
                    toWrite.LastName = lastName;
                    toWrite.Major = major;
                    toWrite.Minor = minor;
                    toWrite.PartOrFullTime = partOrFullTime;
                    toWrite.PhoneNumber = phoneNumber;
                    toWrite.UserID = generatedUserID;

                    mongo.InsertRecord<AllUser>("allUser", toWrite);
                    snackbar.Add("User added successfully", Severity.Success);
                }
                else if (accountType == "Faculty")
                {
                    AllUser toWrite = new AllUser();

                    toWrite.AccountType = accountType;
                    toWrite.Address = address;
                    toWrite.Advisor = advisor;
                    toWrite.Birthday = birthday;
                    toWrite.Department = department;
                    toWrite.Email = email;
                    toWrite.FirstName = firstName;
                    toWrite.LastName = lastName;
                    toWrite.PartOrFullTime = partOrFullTime;
                    toWrite.PhoneNumber = phoneNumber;
                    toWrite.UserID = generatedUserID;

                    mongo.InsertRecord<AllUser>("allUser", toWrite);
                    snackbar.Add("User added successfully", Severity.Success);
                }


            }
            else
            {
                snackbar.Add("User was not added successfully", Severity.Error);
            }
        }
        catch
        {
            snackbar.Add("User was not added successfully", Severity.Error);
        }
    }
}
