@page "/admin/adduser"
@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar snackbar

<h2>Add user</h2>

<MudSelect @bind-Value="accountType" Label="Account Type" Variant="Variant.Outlined">
    @foreach (var x in type)
    {
        <MudSelectItem Value="@x"></MudSelectItem>
    }
</MudSelect>

<MudTextField @bind-Value="address" Label="Address" Variant="Variant.Outlined"></MudTextField>

<MudTextField @bind-Value="advisor" Label="Advisor ID" Variant="Variant.Outlined"></MudTextField>

<MudDatePicker @bind-Value="birthday" Label="Birthday" Variant="Variant.Outlined"></MudDatePicker>

<MudSelect @bind-Value="department" T="string" Label="Department" AnchorOrigin="Origin.BottomCenter">
    @foreach (var x in departments)
    {
        <MudSelectItem Value="@x"></MudSelectItem>
    }
</MudSelect>



<MudTextField @bind-Value="firstName" Label="First Name" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="lastName" Label="Last Name" Variant="Variant.Outlined"></MudTextField>


<MudSelect @bind-Value="major" T="string" Label="Major" AnchorOrigin="Origin.BottomCenter">
    @foreach (var x in majors)
    {
        <MudSelectItem Value="@x"></MudSelectItem>
    }
</MudSelect>

<MudSelect @bind-Value="minor" T="string" Label="Minors" AnchorOrigin="Origin.BottomCenter">
    @foreach (var x in minors)
    {
        <MudSelectItem Value="@x"></MudSelectItem>
    }
</MudSelect>

<MudSelect @bind-Value="partOrFullTime" T="string" Label="Part or Full Time" AnchorOrigin="Origin.BottomCenter">
    @foreach (var x in partOrFullTimeChoices)
    {
        <MudSelectItem Value="@x"></MudSelectItem>
    }
</MudSelect>

<MudTextField @bind-Value="phoneNumber" InputType="InputType.Telephone" Label="Phone Number" Mask="@(new PatternMask("000-000-0000"))" MaxLength="10"></MudTextField>

<MudButton @onclick="submitForm" Variant="Variant.Outlined" Color="Color.Success">submit</MudButton>

@code 
{
    Mongo mongo = new Mongo("college-site-2");

    private static List<string> departments = new List<string> { };
    private static List<string> advisors = new List<string> { };
    private static List<string> majors = new List<string> { };
    private static List<string> minors = new List<string> { };
    private static string[] type = { "Undergraduate", "Graduate", "Faculty", "Admin"  };
    private static string[] partOrFullTimeChoices = { "Part Time", "Full Time" };
    private static string[] userIDIdentifierChoices = { "ACC10", "FCC10", "SCC10" };

    //field variables
    private static string accountType { get; set; }
    private static string address { get; set; }
    private static string advisor { get; set; }
    private static DateTime birthday { get; set; }
    private static string department { get; set; }
    private static string firstName { get; set; }
    private static string lastName { get; set; }
    private static string major { get; set; }
    private static string minor { get; set; }
    private static string partOrFullTime { get; set; }
    private static string phoneNumber { get; set; }

    //private static string userIDIdentifier { get; set; }
    //private static string userID { get; set; }



    protected override async Task OnInitializedAsync()
    {
        var accountTypeCheck = await storage.GetAsync<string>("accountType");

        if (accountTypeCheck.Value != "Admin")
        {
            navigate.NavigateTo("/homepage");
        }

        var queryDepartment = mongo.LoadRecordSortedAsc<Departments>("department", "Department");
        var queryMajors = mongo.LoadRecordSortedAsc<Majors>("majors", "Major");
        var queryMinors = mongo.LoadRecordSortedAsc<Minors>("minors", "Minor");

        foreach (var x in queryDepartment)
        {
            departments.Add(x.Department);
        }

        foreach (var x in queryMajors)
        {
            majors.Add(x.Major);
        }

        minors.Add("None");
        foreach (var x in queryMinors)
        {
            minors.Add(x.Minor);
        }

    }

    protected override void OnAfterRender(bool firstRender)
    {

    }

    private void submitForm()
    {
        bool validForm = true;

        if (accountType == null || accountType == "")
        {
            validForm = false;
        }
        else if (address == null || address == "")
        {
            validForm = false;
        }
        else if (advisor == null || advisor == "")
        {
            validForm = false;
        }
        else if (birthday == null)
        {
            validForm = false;
        }
        else if (department == null || department == "")
        {
            validForm = false;
        }
        else if (firstName == null || firstName == "")
        {
            validForm = false;
        }
        else if (lastName == null || lastName == "")
        {
            validForm = false;
        }
        else if (major == null || major == "")
        {
            validForm = false;
        }
        else if (minor == null || minor == "")
        {
            validForm = false;
        }
        else if (partOrFullTime == null || partOrFullTime == "")
        {
            validForm = false;
        }
        else if (phoneNumber == null || !(phoneNumber.ToString().Length == 10))
        {
            validForm = false;
        }

        if (validForm)
        {
            AllUser toWrite = new AllUser();

            toWrite.AccountType = accountType;
            toWrite.Address = address;
            toWrite.Advisor = advisor;
            toWrite.Birthday = birthday;
            toWrite.Department = department;
            toWrite.FirstName = firstName;
            toWrite.LastName = lastName;
            toWrite.Major = major;
            toWrite.Minor = minor;
            toWrite.PartOrFullTime = partOrFullTime;
            toWrite.PhoneNumber = phoneNumber;

            mongo.InsertRecord<AllUser>("allUser", toWrite);
            snackbar.Add("User added successfully", Severity.Success);
        }
        else
        {
            snackbar.Add("User added successfully", Severity.Error);
        }
    }
}
