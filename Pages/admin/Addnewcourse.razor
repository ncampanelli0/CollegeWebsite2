@page "/admin/addnewcourse"
@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar snackbar

<PageTitle>Add new course</PageTitle>

<h2>Add new course</h2>

<MudNumericField @bind-Value="courseID" Label="course id" Variant="Variant.Outlined" id="textFieldColor" Min="1000" Max="9999"></MudNumericField>

<MudTextField @bind-Value="courseName" Label="course name" Variant="Variant.Outlined" id="textFieldColor" ></MudTextField>

<MudNumericField @bind-Value="credits" Label="credits" Variant="Variant.Outlined" id="textFieldColor" Min="1" Max="4"></MudNumericField>

<MudSelect @bind-Value="department" T="string" Label="Department" AnchorOrigin="Origin.BottomCenter" >
    @foreach (var x in departments)
    {
        <MudSelectItem Style="@theme.selectFieldColor" Value="@x"></MudSelectItem >
    }
</MudSelect>

<MudTextField @bind-Value="description" Label="description" Variant="Variant.Outlined" id="textFieldColor" Lines="4"></MudTextField>

<MudText Align="Align.Center">leave any of these prereqs set to 0 to not assign a prerequiste</MudText>

<br />

<MudSelect @bind-Value="type" Label="Grad or Undergrad" Variant="Variant.Outlined" id="textFieldColor" >
    @foreach (var x in gradType)
    {
        <MudSelectItem Style="@theme.selectFieldColor" Value="@x"></MudSelectItem >
    }
</MudSelect>

<MudButton @onclick="submitForm" Variant="Variant.Outlined" class="btncolor">submit</MudButton>

@code 
{
    Mongo mongo = new Mongo("college-site-2");
    Theme theme = new Theme();

    private string[] creditlabels = { "1", "2", "3", "4" };
    private List<string> departments = new List<String> { };
    private string[] gradType = { "Undergraduate", "Graduate" };

    private static int courseID { get; set; }
    private static string courseName { get; set; }
    private static int credits { get; set; }
    private static string department { get; set; }
    private static string description { get; set; }
    private static int sectionCounter { get; set; }
    private static string type { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var accountTypeCheck = await storage.GetAsync<string>("accountType");

            if (accountTypeCheck.Value != "Admin")
            {
                navigate.NavigateTo("/homepage");
            }
        }
        catch
        {
            navigate.NavigateTo("/homepage");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("on after render (local) ran");
            var queryDepartment = mongo.LoadRecordSortedAsc<Departments>("department", "Department");

            foreach (var x in queryDepartment)
            {
                departments.Add(x.Department);
            }
        }

    }

    private void submitForm()
    {
        try
        {
            bool validForm = true;
            var queryClasses = mongo.LoadRecord<Classes>("classes");

            Console.WriteLine("sanity");
            //form validation
            if (courseID == null || !(courseID >= 1000 && courseID <= 9999))
            {
                validForm = false;
                Console.WriteLine("sanity1");
            }
            else if (courseName == null || courseName == "")
            {
                validForm = false;
                Console.WriteLine("sanity2");
            }
            else if (credits == null || !(credits >= 1 && credits <= 4))
            {
                validForm = false;
                Console.WriteLine("sanity3");
            }
            else if (department == null || department == "")
            {
                validForm = false;
                Console.WriteLine("sanity4");
            }
            else if (description == null || description == "")
            {
                validForm = false;
                Console.WriteLine(description);
            }
            else if (type == null || type == "")
            {
                validForm = false;
                Console.WriteLine("sanity6");
            }


            //sanity check
            bool sanityCheck = true;
            if (validForm)
            {
                Console.WriteLine("sanity");
                var queryCourse = mongo.LoadRecord<Course>("course");

                foreach (var x in queryCourse)
                {
                    if (x.CourseName == courseName || x.CourseID == courseID)
                    {
                        sanityCheck = false;
                        break;
                    }
                }
            }

            if (validForm && sanityCheck)
            {
                Console.WriteLine("inside");
                Course toWrite = new Course();
                List<Prerequiste> prereq = new List<Prerequiste> { };

                toWrite.CourseID = courseID;
                toWrite.CourseName = courseName;
                toWrite.Credits = credits;
                toWrite.Department = department;
                toWrite.Description = description;
                Console.WriteLine("inside1");

                Prerequiste nullObject = new Prerequiste();
                nullObject.MinimumRequirements = "none";
                nullObject.Prereq = "none";
                Console.WriteLine(nullObject.MinimumRequirements);

                Console.WriteLine("inside2");

                toWrite.SectionCounter = 0;
                toWrite.Type = type;
                toWrite.CourseID = courseID;

                Console.WriteLine("inside3");

                mongo.InsertRecord<Course>("course", toWrite);

                snackbar.Add("Course added successfully", Severity.Success);
            }
            else
            {
                snackbar.Add("Course was not added successfully", Severity.Error);
            }
        }
        catch
        {
          snackbar.Add("Course was not added successfully", Severity.Error);
        }
        }
    }

