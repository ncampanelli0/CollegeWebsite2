@page "/admin/edituser"
@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar snackbar

<h2>Edit user</h2>

<MudTextField @bind-Value="accountType" Label="Account Type" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="address" Label="Address" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="advisor" Label="Advisor" Variant="Variant.Outlined"></MudTextField>
<MudDatePicker @bind-Date="birthday" Label="Birthday" Variant="Variant.Outlined"></MudDatePicker>
<MudTextField @bind-Value="department" Label="Department" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="email" Label="Email" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="firstName" Label="First Name" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="lastName" Label="Last Name" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="major" Label="Major" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="minor" Label="Minor" Variant="Variant.Outlined"></MudTextField>

<MudSelect @bind-Value="partOrFullTime" T="string" Label="Part or Full Time" AnchorOrigin="Origin.BottomCenter">
    @foreach (var x in partOrFullTimeList)
    {
        <MudSelectItem Value="@x"></MudSelectItem>
    }
</MudSelect>

<MudTextField @bind-Value="phoneNumber" Label="Phone Number" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="userID" Label="User ID" Variant="Variant.Outlined"></MudTextField>

@code 
{
    List<string> partOrFullTimeList = new List<string> { "Part Time", "Full Time" };

    private static string? accountType { get; set; }
    private static string? address { get; set; }
    private static string? advisor { get; set; }
    private static DateTime? birthday { get; set; }
    private static string? department { get; set; }
    private static string email { get; set; }
    private static string? firstName { get; set; }
    private static string? lastName { get; set; }
    private static string? major { get; set; }
    private static string? minor { get; set; }
    private static string? partOrFullTime { get; set; }
    private static string? phoneNumber { get; set; }
    private static string? userID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var accountTypeCheck = await storage.GetAsync<string>("accountType");

        if (accountTypeCheck.Value != "Admin")
        {
            navigate.NavigateTo("/homepage");
        }
    }

    private void submitForm()
    {
        bool validForm = true;

        if (accountType == null)
        {
            validForm = false;
        }
        else if (address == null)
        {
            validForm = false;
        }
        else if (advisor == null)
        {
            validForm = false;
        }
        else if (birthday == null)
        {
            validForm = false;
        }
        else if (department == null)
        {
            validForm = false;
        }
        else if (email == null)
        {
            validForm = false;
        }
        else if (firstName == null)
        {
            validForm = false;
        }
        else if (lastName == null)
        {
            validForm = false;
        }
        else if (major == null)
        {
            validForm = false;
        }
        else if (minor == null)
        {
            validForm = false;
        }
        else if (partOrFullTime == null)
        {
            validForm = false;
        }
        else if (phoneNumber == null)
        {
            validForm = false;
        }
        else if (userID == null)
        {
            validForm = false;
        }
    }
}
