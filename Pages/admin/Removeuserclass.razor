@page "/admin/removeuserclass"
@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar snackbar

<h2>Remove user from class</h2>

<MudTextField @bind-Value="userID" Label="User ID" Variant="Variant.Outlined" id="textFieldColor" Style="@theme.textFieldColor"></MudTextField>
<MudNumericField @bind-Value="CRN" Label="CRN" Variant="Variant.Outlined" id="textFieldColor" Style="@theme.textFieldColor" Min="10000" Max="99999"></MudNumericField>
<MudButton @onclick="submitForm" Variant="Variant.Outlined" class="btncolor">submit</MudButton>



@code
{
    Mongo mongo = new Mongo("college-site-2");
    Theme theme = new Theme();

    private static string userID { get; set; }
    private static int CRN { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var accountTypeCheck = await storage.GetAsync<string>("accountType");

            if (accountTypeCheck.Value != "Admin")
            {
                navigate.NavigateTo("/homepage");
            }
        }
        catch
        {
            navigate.NavigateTo("/homepage");
        }
    }


    private void submitForm()
    {
        try
        {

            bool validForm = true;

            if (userID == null || userID == "")
            {
                validForm = false;
            }
            else if (CRN == null || !(CRN >= 10000 && CRN <= 99999))
            {
                validForm = false;
            }

            //sanity check
            bool sanityCheck = true;
            
            if (validForm)
            {
                
                var queryClassID = mongo.LoadRecordByInt<Classes>("classes", "CRN", CRN);


                if (queryClassID.WithdrawLimit.ToLocalTime() < DateTime.Now.ToLocalTime())
                {
                    sanityCheck = false;
                }
            }


            if (validForm && sanityCheck)
            {
                var queryClassesID = mongo.LoadRecordByInt<Classes>("classes", "CRN", CRN);
                var queryAllUserID = mongo.LoadRecordByString<AllUser>("allUser", "UserID", userID);
                bool userNotFound = true;
                for (int i = 0; i < queryClassesID.Enrolled.Count; i++)
                {

                    if (queryClassesID.Enrolled[i].UserID.Contains(userID))
                    {
                        Console.WriteLine($"{queryClassesID.Enrolled[i].UserID}");
                        queryClassesID.Enrolled.RemoveAt(i);
                        snackbar.Add("User removed from class", Severity.Success);

                        mongo.UpsertRecord<Classes>("classes", queryClassesID.Id, queryClassesID);
                        userNotFound = false;
                    }
                }

                if (userNotFound)
                {
                    snackbar.Add("User not removed from class", Severity.Error);
                }
                
            }
            else
            {
                snackbar.Add("User not removed from class", Severity.Error);
            }
        }
        catch
        {
            snackbar.Add("User not removed from class", Severity.Error);
        }
    }
}

