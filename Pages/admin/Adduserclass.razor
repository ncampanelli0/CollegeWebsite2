@page "/admin/adduserclass"
@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar snackbar

<h2>Add student to class</h2>

<MudTextField @bind-Value="userID" Label="User ID" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="CRN" Label="CRN" Variant="Variant.Outlined"></MudTextField>
<MudButton @onclick="submitForm" Variant="Variant.Outlined" Color="Color.Success">submit</MudButton>



@code
{
    Mongo mongo = new Mongo("college-site-2");

    private static string userID { get; set; }
    private static string CRN { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var accountTypeCheck = await storage.GetAsync<string>("accountType");

            if (accountTypeCheck.Value != "Admin")
            {
                navigate.NavigateTo("/homepage");
            }
        }
        catch
        {
            navigate.NavigateTo("/homepage");
        }
    }

    private void submitForm()
    {
        try
        {
            //form validation
            bool validForm = true;

            if ((userID == null || userID == "") && !(userID.Contains("SCC")))
            {
                validForm = false;
            }
            else if (CRN == null || CRN == "")
            {
                validForm = false;
            }

            //sanity check
            bool sanityCheck = true;

            if (validForm)
            {
                var queryStudentID = mongo.LoadRecordByString<AllUser>("allUser", "UserID", userID);
                var queryClassesID = mongo.LoadRecordByString<Classes>("classes", "CRN", CRN);
                var queryClasses = mongo.LoadRecord<Classes>("classes");

                int enrolledCreditCounter = 0;
                foreach (var x in queryClasses)
                {
                    foreach (var y in x.Enrolled)
                    {
                        if (y.UserID == queryStudentID.UserID && (queryClassesID.StartDate.Year == x.StartDate.Year && queryClassesID.Semester == x.Semester))
                        {
                            enrolledCreditCounter += x.Credits;
                        }
                    }
                }

                if (enrolledCreditCounter > 8 && queryStudentID.PartOrFullTime == "Part Time")
                {
                    sanityCheck = false;
                }
                else if (enrolledCreditCounter > 16 && queryStudentID.PartOrFullTime == "Full Time")
                {
                    sanityCheck = false;
                }

                foreach (var x in queryClassesID.Enrolled)
                {
                    if (x.UserID == queryStudentID.UserID)
                    {
                        sanityCheck = false;
                    }
                }

            }



            if (validForm && sanityCheck)
            {
                var queryClassesID = mongo.LoadRecordByString<Classes>("classes", "CRN", CRN);
                var queryUserID = mongo.LoadRecordByString<AllUser>("allUser", "UserID", userID);

                Enrolled toWrite = new Enrolled();

                toWrite.Attendance = 0;
                toWrite.UserID = queryUserID.UserID;
                toWrite.FinalGrade = "none";
                toWrite.FirstName = queryUserID.FirstName;
                toWrite.LastName = queryUserID.LastName;
                toWrite.Grades = new List<string> { };
                toWrite.MidTermGrade = "none";

                queryClassesID.Enrolled.Add(toWrite);

                mongo.UpsertRecord<Classes>("classes", queryClassesID.Id, queryClassesID);
                snackbar.Add("User added to class successfully", Severity.Success);
            }
            else
            {
                snackbar.Add("User was not added to class", Severity.Error);
            }
        }
        catch
        {
            snackbar.Add("User was not added to class", Severity.Error);
        }

    }
}