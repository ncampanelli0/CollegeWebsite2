@page "/developer/scheduleprofessors2"
<style>
    button
    {
        color: red;
        background-color: black;
    }

    h2
    {
        color: red;
        background-color:black;
        text-align: center;
    }
</style>

<button @onclick="runFunctions">schedule and assign professors 2</button>


@code
{
    Mongo mongo = new Mongo("college-site-2");
    private void runFunctions()
    {
        List<string> departmentList = new List<string>
        {
            "American Studies",
            "Biological Sciences",
            "Chemistry and Physics",
            "English and Education",
            "History and Philosophy",
            "Math and Computers",
            "Media and Communications",
            "Modern Language",
            "Politics Economics and Law",
            "Psychology",
            "Public Health",
            "Sociology and Criminology",
            "Visual Arts"
        };

        List<string> majorList = new List<string>
        {
            "American Studies",
            "Biological Sciences",
            "Chemistry and Physics",
            "English",
            "History and Philosophy",
            "Computer Science",
            "Industrial and Labor Relations",
            "Modern Language",
            "Politics Economics and Law",
            "Psychology",
            "Health and Society",
            "Criminology",
            "Visual Arts"
        };

        Console.WriteLine("running all scripts");
        for (int x = 0; x < departmentList.Count; x++)
        {



            /*
            assignProfessorsToClassNoCap(2018, "Fall", departmentList[x]);
            assignProfessorsToClassNoCap(2019, "Fall", departmentList[x]);
            assignProfessorsToClassNoCap(2020, "Fall", departmentList[x]);
            assignProfessorsToClassNoCap(2021, "Fall", departmentList[x]);
            assignProfessorsToClassNoCap(2022, "Fall", departmentList[x]);
            assignProfessorsToClass(2023, "Fall", departmentList[x], 9);

            assignProfessorsToClassNoCap(2018, "Spring", departmentList[x]);
            assignProfessorsToClassNoCap(2019, "Spring", departmentList[x]);
            assignProfessorsToClassNoCap(2020, "Spring", departmentList[x]);
            assignProfessorsToClassNoCap(2021, "Spring", departmentList[x]);
            assignProfessorsToClassNoCap(2022, "Spring", departmentList[x]);
            assignProfessorsToClass(2023, "Spring", departmentList[x], 1);


            assignProfessorsToClassNoCap(2018, "Summer", departmentList[x]);
            assignProfessorsToClassNoCap(2019, "Summer", departmentList[x]);
            assignProfessorsToClassNoCap(2020, "Summer", departmentList[x]);
            assignProfessorsToClassNoCap(2021, "Summer", departmentList[x]);
            assignProfessorsToClassNoCap(2022, "Summer", departmentList[x]);
        assignProfessorsToClass(2023, "Summer", departmentList[x], 6);


            assignProfessorsToClassNoCap(2018, "Winter", departmentList[x]);
            assignProfessorsToClassNoCap(2019, "Winter", departmentList[x]);
            assignProfessorsToClassNoCap(2020, "Winter", departmentList[x]);
            assignProfessorsToClassNoCap(2021, "Winter", departmentList[x]);
            assignProfessorsToClassNoCap(2022, "Winter", departmentList[x]);
            assignProfessorsToClass(2023, "Winter", departmentList[x], 1);
            */

            assignStudentsToClass(majorList[x], departmentList[x], 2018, "Fall");
            assignStudentsToClass(majorList[x], departmentList[x], 2019, "Fall");
            assignStudentsToClass(majorList[x], departmentList[x], 2020, "Fall");
            assignStudentsToClass(majorList[x], departmentList[x], 2021, "Fall");
            assignStudentsToClass(majorList[x], departmentList[x], 2022, "Fall");
            assignStudentsToClass(majorList[x], departmentList[x], 2023, "Fall");

            assignStudentsToClass(majorList[x], departmentList[x], 2018, "Spring");
            assignStudentsToClass(majorList[x], departmentList[x], 2019, "Spring");
            assignStudentsToClass(majorList[x], departmentList[x], 2020, "Spring");
            assignStudentsToClass(majorList[x], departmentList[x], 2021, "Spring");
            assignStudentsToClass(majorList[x], departmentList[x], 2022, "Spring");
            assignStudentsToClass(majorList[x], departmentList[x], 2023, "Spring");

            assignStudentsToClass(majorList[x], departmentList[x], 2018, "Winter");
            assignStudentsToClass(majorList[x], departmentList[x], 2019, "Winter");
            assignStudentsToClass(majorList[x], departmentList[x], 2020, "Winter");
            assignStudentsToClass(majorList[x], departmentList[x], 2021, "Winter");
            assignStudentsToClass(majorList[x], departmentList[x], 2022, "Winter");
            assignStudentsToClass(majorList[x], departmentList[x], 2023, "Winter");

            assignStudentsToClass(majorList[x], departmentList[x], 2018, "Summer");
            assignStudentsToClass(majorList[x], departmentList[x], 2019, "Summer");
            assignStudentsToClass(majorList[x], departmentList[x], 2020, "Summer");
            assignStudentsToClass(majorList[x], departmentList[x], 2021, "Summer");
            assignStudentsToClass(majorList[x], departmentList[x], 2022, "Summer");
            assignStudentsToClass(majorList[x], departmentList[x], 2023, "Summer");

        }
        //writeProfessorSchedulesToTranscript();
        Console.WriteLine("done running all scripts");
    }

    //this one is specifically for past semesters
    private void assignProfessorsToClassNoCap(int year, string semester, string department)
    {

        var queryUser = mongo.FilterCollectionByString<AllUser>("allUser", "Department", department);
        var queryClasses = mongo.FilterCollectionByString<Classes>("classes", "Department", department);

        int counter = 0;
        try
        {
            foreach (var x in queryClasses)
            {
                Console.WriteLine($"professor (department): {queryUser[counter].FirstName} {queryUser[counter].LastName} ({queryUser[counter].Department}) class department: {x.Department} counter: {counter}");
                if (queryUser[counter].PartOrFullTime == "Part Time" && queryUser[counter].AccountType == "Faculty")
                {
                    x.ProfFirstName = queryUser[counter].FirstName;
                    x.ProfLastName = queryUser[counter].LastName;
                    x.ProfessorName = $"{queryUser[counter].FirstName} {queryUser[counter].LastName}";
                    mongo.UpsertRecord<Classes>("classes", x.Id, x);
                    counter++;
                }

                if (queryUser[counter].PartOrFullTime == "Full Time" && queryUser[counter].AccountType == "Faculty")
                {
                    x.ProfFirstName = queryUser[counter].FirstName;
                    x.ProfLastName = queryUser[counter].LastName;
                    x.ProfessorName = $"{queryUser[counter].FirstName} {queryUser[counter].LastName}";
                    mongo.UpsertRecord<Classes>("classes", x.Id, x);
                    counter++;

                    x.ProfFirstName = queryUser[counter].FirstName;
                    x.ProfLastName = queryUser[counter].LastName;
                    x.ProfessorName = $"{queryUser[counter].FirstName} {queryUser[counter].LastName}";
                    mongo.UpsertRecord<Classes>("classes", x.Id, x);
                    counter++;

                }
                if (counter >= 60)
                {
                    counter = 0;
                }
            }
        }
        catch
        {
            counter = 0;

        }



        Console.WriteLine("table updated");
    }

    //this one is specifically for current semester, cap implemented to prevent more then max
    //(based on part or full time) from being assigned
    private void assignProfessorsToClass(int year, string semester, string department, int month)
    {

        var queryUser = mongo.FilterCollectionByString<AllUser>("allUser", "Department", department);
        var queryClasses = mongo.FilterCollectionByString<Classes>("classes", "Department", department);

        int counter = 0;
        try
        {
            foreach (var x in queryClasses)
            {
                int cap = 0;

                if (x.StartDate.Year == 2023 && x.StartDate.Month == month)
                {
                    if (queryUser[counter].PartOrFullTime == "Part Time" && queryUser[counter].AccountType == "Faculty")
                    {
                        x.ProfFirstName = queryUser[counter].FirstName;
                        x.ProfLastName = queryUser[counter].LastName;
                        x.ProfessorName = $"{queryUser[counter].FirstName} {queryUser[counter].LastName}";
                        mongo.UpsertRecord<Classes>("classes", x.Id, x);
                        cap += 2;
                        Console.WriteLine($"professor (department): {queryUser[counter].FirstName} {queryUser[counter].LastName} ({queryUser[counter].Department}) class department: {x.Department} counter: {counter}");
                    }

                    if (queryUser[counter].PartOrFullTime == "Full Time" && queryUser[counter].AccountType == "Faculty")
                    {
                        x.ProfFirstName = queryUser[counter].FirstName;
                        x.ProfLastName = queryUser[counter].LastName;
                        x.ProfessorName = $"{queryUser[counter].FirstName} {queryUser[counter].LastName}";
                        mongo.UpsertRecord<Classes>("classes", x.Id, x);
                        cap++;
                        Console.WriteLine($"professor (department): {queryUser[counter].FirstName} {queryUser[counter].LastName} ({queryUser[counter].Department}) class department: {x.Department} counter: {counter}");

                    }


                    if (cap >= 2)
                    {
                        counter++;
                        cap = 0;
                    }

                    if (counter >= 60)
                    {
                        counter = 0;
                    }
                }
            }

        }
        catch
        {
            counter = 0;

        }



        Console.WriteLine("table updated");
    }


    private void assignStudentsToClass(string major, string department, int year, string semester)
    {

        var queryClassesSorted = mongo.GetAllUserByFilterAndSortByYear(department, year);
        var queryUserSorted = mongo.FilterCollectionByStringAndSortASC<AllUser>("allUser", "Major", major, major);
        Console.WriteLine("running assignStudentsToClass");

        /*
        foreach (var y in queryClassesSorted)
            {
            Console.WriteLine($"{y.Department} {y.Semester} {y.StartDate.Year}");
        }
        */

        int counter = 0;

        foreach (var x in queryUserSorted)
        {
            string[] gradeChoices = { "A", "B", "C", "D", "F" };
            List<string> gradesToAdd = new List<string> { };
            bool[] attended = { true, false };
            Random random = new Random();

            try
            {
                while (!(queryClassesSorted[counter].StartDate.Year == year && queryClassesSorted[counter].Semester == semester))
                {
                    counter++;
                }

                if (queryClassesSorted[counter].Enrolled.Count >= 25)
                {
                    counter++;
                }
                //Console.WriteLine($"counter: {counter} department: {queryClassesSorted[counter].Department} year: {queryClassesSorted[counter].StartDate.Year} semester: {queryClassesSorted[counter].Semester}");
                if (x.AccountType == "Undergraduate" && x.PartOrFullTime == "Full Time")
                {


                    for (int i = 0; i < 4; i++)
                    {
                        Enrolled toAdd = new Enrolled();

                        for (int y = 0; y < 5; y++)
                        {
                            gradesToAdd.Add(gradeChoices[random.Next(0, 4)]);

                        }

                        toAdd.FirstName = x.FirstName;
                        toAdd.LastName = x.LastName;
                        toAdd.StudentID = x.StudentID;
                        toAdd.Grades = gradesToAdd;
                        toAdd.MidTermGrade = gradeChoices[random.Next(0, 4)];
                        toAdd.FinalGrade = gradeChoices[random.Next(0, 4)];
                        toAdd.Attendance = random.Next(26, 32);
                        toAdd.MissedAttendance = random.Next(0, 5);


                        queryClassesSorted[counter].Enrolled.Add(toAdd);
                        mongo.UpsertRecord<Classes>("classes", queryClassesSorted[counter].Id, queryClassesSorted[counter]);
                        counter++;
                    }
                        counter -= 4;
                        gradesToAdd.Clear();

                }
                else if (x.AccountType == "Undergraduate" && x.PartOrFullTime == "Part Time")
                {
                    
                    for (int i = 0; i < 2; i++)
                    {
                        Enrolled toAdd = new Enrolled();

                        for (int y = 0; y < 5; y++)
                        {
                            gradesToAdd.Add(gradeChoices[random.Next(0, 4)]);

                        }

                        toAdd.FirstName = x.FirstName;
                        toAdd.LastName = x.LastName;
                        toAdd.StudentID = x.StudentID;
                        toAdd.Grades = gradesToAdd;
                        toAdd.MidTermGrade = gradeChoices[random.Next(0, 4)];
                        toAdd.FinalGrade = gradeChoices[random.Next(0, 4)];
                        toAdd.Attendance = random.Next(26, 32);

                        queryClassesSorted[counter].Enrolled.Add(toAdd);
                        mongo.UpsertRecord<Classes>("classes", queryClassesSorted[counter].Id, queryClassesSorted[counter]);
                        counter++;
                    }
                    counter -= 2;
                    gradesToAdd.Clear();
                }
                else if (x.AccountType == "Graduate" && x.PartOrFullTime == "Part Time")
                {
                    for (int i = 0; i < 2; i++)
                    {
                        Enrolled toAdd = new Enrolled();

                        for (int y = 0; y < 5; y++)
                        {
                            gradesToAdd.Add(gradeChoices[random.Next(0, 4)]);

                        }

                        toAdd.FirstName = x.FirstName;
                        toAdd.LastName = x.LastName;
                        toAdd.StudentID = x.StudentID;
                        toAdd.Grades = gradesToAdd;
                        toAdd.MidTermGrade = gradeChoices[random.Next(0, 4)];
                        toAdd.FinalGrade = gradeChoices[random.Next(0, 4)];
                        toAdd.Attendance = random.Next(26, 32);

                        queryClassesSorted[counter].Enrolled.Add(toAdd);
                        mongo.UpsertRecord<Classes>("classes", queryClassesSorted[counter].Id, queryClassesSorted[counter]);
                        counter++;
                    }
                    counter -= 2;
                    gradesToAdd.Clear();
                }
                else if (x.AccountType == "Graduate" && x.PartOrFullTime == "Full Time")
                {
                    for (int i = 0; i < 4; i++)
                    {
                        Enrolled toAdd = new Enrolled();

                        for (int y = 0; y < 5; y++)
                        {
                            gradesToAdd.Add(gradeChoices[random.Next(0, 4)]);
                        }

                        toAdd.FirstName = x.FirstName;
                        toAdd.LastName = x.LastName;
                        toAdd.StudentID = x.StudentID;
                        toAdd.Grades = gradesToAdd;
                        toAdd.MidTermGrade = gradeChoices[random.Next(0, 4)];
                        toAdd.FinalGrade = gradeChoices[random.Next(0, 4)];
                        toAdd.Attendance = random.Next(26, 32);

                        queryClassesSorted[counter].Enrolled.Add(toAdd);
                        mongo.UpsertRecord<Classes>("classes", queryClassesSorted[counter].Id, queryClassesSorted[counter]);
                        counter++;
                    }
                    counter -= 4;
                    gradesToAdd.Clear();
                }
            }
                catch
                {
                    Console.WriteLine("catch");
                }
        }
            

        Console.WriteLine("table updated");
    }

    //transfers data from the assign* functions, run after them
    private void writeProfessorSchedulesToTranscript()
    {

        var queryClasses = mongo.LoadRecord<Classes>("classes");
        string[] gradeChoices = { "A", "B", "C", "D", "F" };
        string[] gradeList = { };
        Random random = new Random();

        Console.WriteLine("running writeProfessorSchedulesToTranscript");

        foreach (var x in queryClasses)
        {
            var queryClassTest = mongo.GetClassByClasses(x.ProfLastName, x.CourseName);
            var queryUser = mongo.GetPersonByAllUser(x.ProfFirstName, x.ProfLastName);
                if (!(queryUser.AccountType == "Faculty" && x.StartDate.Year == 2023 && x.StartDate.Month == 1))
                {

                    for (int y = 0; y < x.Enrolled.Count; y++)
                    {
                        for (var i = 0; i < random.Next(1, 5); i++)
                        {
                            gradeList[i] = gradeChoices[random.Next(0, 4)];
                        }
                        var queryStudent = mongo.LoadRecordByString<AllUser>("allUser", "StudentID", x.Enrolled[y].StudentID);
                        StudentData studentData = new StudentData
                            {
                                StudentID = queryStudent.StudentID,
                                FirstName = queryStudent.FirstName,
                                LastName = queryStudent.LastName,
                                Major = queryStudent.Major,
                                Minor = queryStudent.Minor,
                                Grade = gradeList.ToList()
                            };

                        Transcript transcriptToAdd = new Transcript
                            {
                                Building = x.BuildingID,
                                CourseName = x.CourseName,
                                CourseID = x.CourseID,
                                Credits = x.Credits,
                                CRN = x.CRN,
                                EndDate = x.EndDate,
                                RoomID = x.RoomID,
                                Semester = x.Semester,
                                StartDate = x.StartDate,
                                StudentData = studentData
                            };
                        queryUser.Transcript.Add(transcriptToAdd);
                        mongo.UpsertRecord<AllUser>("allUser", queryUser.Id, queryUser);
                    }
                }
                else
                {

                    Schedule ScheduleToAdd = new Schedule
                        {
                            Building = x.BuildingID,
                            CourseName = x.CourseName,
                            CourseID = x.CourseID,
                            Credits = x.Credits,
                            CRN = x.CRN,
                            EndDate = x.EndDate,
                            RoomID = x.RoomID,
                            Semester = x.Semester,
                            StartDate = x.StartDate,
                        };

                    queryUser.Schedule.Add(ScheduleToAdd);

                    mongo.UpsertRecord<AllUser>("allUser", queryUser.Id, queryUser);
                }
            }
            
        
        Console.WriteLine("table updated");
    }
}
