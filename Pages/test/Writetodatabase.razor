@page "/developer/writetodatabase"

<style>
    button {
        color: red;
        background-color: black;
    }

    h2 {
        color: red;
        background-color: black;
        text-align: center;
    }
</style>

<h2>developer page (database writer)</h2>

<button @onclick="updatePasswords">update passwords</button>

<button @onclick="updateclasses">update classes</button>

<button @onclick = "CourseID">course id generation</button>

<button @onclick = "sectionNumber">section number generation</button>

<button @onclick="moveTimeWindowToClasses">move time window to classes</button>

<br />

<button @onclick="moveProfessorNamesToClasses">move professor names to classes</button>

<button @onclick="addGradeRequirements">add grade requirements to majors and minors</button>

<!-- <button @onclick="moveAdvisorToStudents">move advisors to students</button> -->

<!-- <button @onclick="moveMajorMinorToStudents">move Majors and Minors to students</button> -->

<button @onclick="writeCrnAndRelatedToCourses">write CRN and related to courses</button>

<br />

<button @onclick="writeCrnAndRelatedToClasses">write CRN and related to classes</button>

<button @onclick="writeCourseIDIntoClass">write course id into class</button>

<button @onclick="writeCrnAndRelatedToClassesAndwriteCourseIDIntoClass"> write CRN and related to classes and write course id into class </button>

<button @onclick="CreateIdsForStudents">create id for students (incredibly slow)</button>

<button @onclick = "CreateIdsForStudentsSemiRandom">create id for students (semi random)</button>

<br />

<button @onclick = "fixNullValuesForStudents">fix null values for students</button>

<button @onclick="writeIDsForAllUsersSemiRandom">create id for all users (semi random)</button>

@code 
{
    string finalString = "";
    Random random = new Random();
    Mongo mongo = new Mongo("college-site-2");

    private void updatePasswords()
    {
        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var stringChars = new char[8];
        var random = new Random();


        var list = new List<string> { };
        var counter = 0;
        for (int i = 0; i < 5000; i++)
        {
            for (int j = 0; j < stringChars.Length; j++)
            {
                stringChars[j] = chars[random.Next(chars.Length)];
            }

            finalString = new String(stringChars);
            list.Add(finalString);
            Console.WriteLine($"counter1: {counter}   {list[counter]}");
            counter++;

        }

        var userQuery = mongo.LoadRecord<AllUser>("allUser");
        var advisorQuery = mongo.LoadRecord<Advisor>("advisor");



        int counter2 = 0;
        Console.WriteLine("before write");
        foreach (var user in userQuery)
        {
            Console.WriteLine($"{list.Count}");
            Console.WriteLine($"before: {user.Password}");
            user.Password = list[counter2];
            mongo.UpsertRecord<AllUser>("allUser", user.Id, user);
            Console.WriteLine($"after: {user.Password}");
            Console.WriteLine($"counter2 {counter2}   {list[counter2]}");
            counter2++;

        }

        foreach (var advisor in advisorQuery)
        {
            Console.WriteLine($"{list.Count}");
            Console.WriteLine($"before: {advisor.Password}");
            advisor.Password = list[counter2];
            mongo.UpsertRecord<Advisor>("advisor", advisor.Id, advisor);
            Console.WriteLine($"after: {advisor.Password}");
            Console.WriteLine($"counter2 {counter2}   {list[counter2]}");
            counter2++;
        }

    }

    private void updateclasses()
    {

        var query = mongo.LoadRecord<Classes>("classes");
        var query2 = mongo.LoadRecord<TimeWindow>("timeWindow");

        int rando = random.Next(0, 48);

        foreach (var update in query)
        {
            rando = random.Next(0, 48);
            //update.TimeID = (ObjectId)query2[rando].Id;
            //Console.WriteLine($"{update.TimeID}");
            mongo.UpsertRecord<Classes>("classes", update.Id, update);

        }
    }




    private void CourseID()
    {


        var query = mongo.LoadRecord<Classes>("classes");
        int y = 1000;
        foreach (var whatever in query) 
        {
            whatever.CRN = y;
            Console.WriteLine($"{y}");
            mongo.UpsertRecord<Classes>("classes",whatever.Id,whatever);
            y++;
        }

    }

    private void sectionNumber()
    {
        Console.WriteLine("running sectionNumber");
        var query = mongo.LoadRecordSortedAsc<Classes>("classes", "CourseName");



        int sectionNum = 0;
        string currentCourseName = "";
        foreach (var x in query)
        {

            if (x.CourseName == currentCourseName)
            {
                sectionNum++;
            }
            else
            {
                var queryCourse = mongo.LoadRecordByString<Course>("course", "CourseName",  x.CourseName);
                queryCourse.SectionCounter = sectionNum;
                mongo.UpsertRecord<Course>("course", queryCourse.Id, queryCourse);
                sectionNum = 0;


            }
            currentCourseName = x.CourseName;
            if (sectionNum <= 8)
            {
                x.Section = "000" + (sectionNum + 1).ToString();
            }
            else
            {
                x.Section = "00" + (sectionNum + 1).ToString();
            }
            mongo.UpsertRecord<Classes>("classes", x.Id, x);
            Console.WriteLine($"{x.CourseName}");
        }

    }

    private void moveTimeWindowToClasses()
    {
        var queryClasses = mongo.LoadRecord<Classes>("classes");

        Console.WriteLine("running moveTimeWindowToClasses()");
        foreach (var classes in queryClasses)
        {
            //var queryTimeWindow = mongo.LoadRecordById<TimeWindow>("timeWindow", classes.TimeID);

            /*
            classes.Semester = queryTimeWindow.Semester;
            classes.Period = queryTimeWindow.Period;
            classes.StartDate = queryTimeWindow.StartDate;
            classes.EndDate = queryTimeWindow.EndDate;
            classes.GradeLimit = queryTimeWindow.GradeLimit;
            classes.RegistrationLimit = queryTimeWindow.RegistrationLimit;
            classes.WithdrawLimit = queryTimeWindow.WithdrawLimit;
            */
            mongo.UpsertRecord<Classes>("classes", classes.Id, classes);
        }
        Console.WriteLine("done updating table");
    }

    private void moveProfessorNamesToClasses()
    {
        var queryClass = mongo.LoadRecord<Classes>("classes");
        Console.WriteLine("running moveProfessorNamesToClasses");
        foreach (var classes in queryClass)
        {
            var queryProf = mongo.LoadRecordById<AllUser>("allUser", classes.Professor);

            classes.ProfFirstName = $"{queryProf.FirstName}";
            classes.ProfLastName = $"{queryProf.LastName}";
            mongo.UpsertRecord<Classes>("classes", classes.Id, classes);

        }
        Console.WriteLine("table updated");
    }

    private void addGradeRequirements()
    {
        var queryMajor = mongo.LoadRecord<Majors>("majors");
        var queryMinor = mongo.LoadRecord<Minors>("minors");
        List<string> grades = new List<string> { };

        Console.WriteLine("running addGradeRequirements()");


        foreach (var x in queryMajor)
        {
            foreach (var y in x.MajorRequirements)
            {
                Console.WriteLine("wrote a c");
                grades.Add("C");
            }

            x.GradeRequirements = grades.ToArray();
            mongo.UpsertRecord<Majors>("majors", x.Id, x);

            grades.Clear();
        }

        foreach (var x in queryMinor)
        {
            foreach (var y in x.MinorRequirements)
            {
                grades.Add("C");
            }

            x.GradeRequirements = grades.ToArray();
            mongo.UpsertRecord<Minors>("minors", x.Id, x);

            grades.Clear();
        }
        Console.WriteLine("done updating database");

    }

            /*
            private void moveAdvisorToStudents()
            {
            var queryUser = mongo.LoadRecord<AllUser>("allUser");
        Console.WriteLine("running moveAdvisorToStudents");
    foreach (var user in queryUser)
    {
    if (user.AdvisorID != null)
    {
    var queryAdvisor = mongo.LoadRecordById<Advisor>("advisor", user.AdvisorID);

    user.Advisor = $"{queryAdvisor.FirstName} {queryAdvisor.LastName}";
    mongo.UpsertRecord<AllUser>("allUser", user.Id, user);
        }


        }
        Console.WriteLine("table updated");
        }
            */

            /*
            private void moveMajorMinorToStudents()
    {
    var queryUser = mongo.LoadRecord<AllUser>("allUser");
    Console.WriteLine("running moveMajorMinorToStudents");
    foreach (var user in queryUser)
    {
    try
    {
    if (user.MajorID != null)
    {
    var queryMajor = mongo.LoadRecordById<Majors>("majors", user.MajorID);
    user.Major = $"{queryMajor.Major}";
            mongo.UpsertRecord<AllUser>("allUser", user.Id, user);
        }
        }
    catch
    {
    Console.WriteLine("try failed major");
    }

    try
    {
    if (user.MinorID != null)
    {
    var queryMinor = mongo.LoadRecordById<Minors>("minors", user.MinorID);
    user.Minor = $"{queryMinor.Minor}";
    mongo.UpsertRecord<AllUser>("allUser", user.Id, user);
    }
    }
    catch
        {
        Console.WriteLine("try failed minor");
    }



    }
    Console.WriteLine("table updated");
    }
    */
    private void writeCrnAndRelatedToCourses()
    {
        var queryCourse = mongo.LoadRecord<Course>("course");

        int courseIDStartNumber = 1000;

        Console.WriteLine("writeCrnAndRelatedToCourses running");


        foreach (var x in queryCourse)
        {
            x.CourseID = courseIDStartNumber;
            courseIDStartNumber++;


            mongo.UpsertRecord<Course>("course", x.Id, x);
        }

        Console.WriteLine("table updated");
    }

    private void writeCrnAndRelatedToClasses()
    {
        var queryClasses = mongo.LoadRecord<Classes>("classes");

        int cRNStartNumber = 10000;



        Console.WriteLine("writeCrnAndRelatedToClasses running");

        foreach (var x in queryClasses)
        {
            x.CRN = cRNStartNumber;
            cRNStartNumber += 10;
            mongo.UpsertRecord<Classes>("classes", x.Id, x);
        }

        sectionNumber();


        Console.WriteLine("table updated");
    }

    private void writeCourseIDIntoClass()
    {

        var queryClass = mongo.LoadRecordSortedAsc<Classes>("classes", "CourseName");
        var queryCourse = mongo.LoadRecordSortedAsc<Course>("course", "CourseName");
        bool flag = false;

        Console.WriteLine("running writeCourseIDIntoClass");

        int counter = 0;
        string temp = queryCourse[0].CourseName;

        for (int i = 0; i < queryClass.Count; i++)
        {





            if (queryClass[i].CourseName != temp)
            {
                counter++;
                Console.WriteLine("counter increased");
            }
            queryClass[i].CourseID = queryCourse[counter].CourseID;
            Console.WriteLine($"queryCourse[{i}]: {queryCourse[counter].CourseName} - temp: {temp} - written crn: {queryCourse[counter].CourseID}");
            temp = queryCourse[counter].CourseName;



            mongo.UpsertRecord<Classes>("classes", queryClass[i].Id, queryClass[i]);
        }



        Console.WriteLine("table updated");
    }

    private void writeCrnAndRelatedToClassesAndwriteCourseIDIntoClass()
    {
        writeCrnAndRelatedToClasses();
        writeCourseIDIntoClass();
    }


    private void CreateIdsForStudents()
    {
        Random random = new Random();



        var queryUser = mongo.LoadRecordSortedAsc<AllUser>("allUser", "AccountType");
        Console.WriteLine("running CreateIdsForStudents");

        List<int> assigned = new List<int> { };
        int rando;
        bool flag = false;


        foreach (var x in queryUser)
        {
            if (x.AccountType == "Graduate" || x.AccountType == "Undergraduate")
            {


                while (!flag)
                {
                    rando = random.Next(10000, 99999);
                    foreach (var y in assigned)
                    {
                        if (y == rando)
                        {
                            flag = false;
                            break;
                        }
                        else
                        {
                            flag = true;
                        }
                    }

                    if (flag)
                    {
                        string id = $"CCC{rando}";
                        x.UserID = id;
                        assigned.Add(rando);
                        mongo.UpsertRecord<AllUser>("allUser", x.Id, x);
                    }
                }



            }
        }
        Console.WriteLine("table updated");
    }





    private void CreateIdsForStudentsSemiRandom()
    {
        Random random = new Random();



        var queryUser = mongo.LoadRecordSortedAsc<AllUser>("allUser", "AccountType");
        Console.WriteLine("running CreateIdsForStudents");

        List<int> assigned = new List<int> { };
        bool flag = false;
        int currentVal = 1000000;
        int writeCount = 1;
        Console.WriteLine(queryUser.Count);
        foreach (var x in queryUser)
        {
            if (x.AccountType == "Graduate" || x.AccountType == "Undergraduate")
            {
                x.UserID = "SCC" + currentVal;
                currentVal += random.Next(1, 6);
                Console.WriteLine($"write count: {writeCount} generated Value: {x.UserID}");
                mongo.UpsertRecord<AllUser>("allUser", x.Id, x);
                writeCount++;
            }

            if (currentVal >= 9999999)
            {
                currentVal = -99999;
            }

        }
        Console.WriteLine("table updated");
    }

    private void CreateIdsForFacultySemiRandom()
    {
        Random random = new Random();



        var queryUser = mongo.LoadRecordSortedAsc<AllUser>("allUser", "AccountType");
        Console.WriteLine("running CreateIdsForStudents");

        List<int> assigned = new List<int> { };
        bool flag = false;
        int currentVal = 1000000;
        int writeCount = 1;
        Console.WriteLine(queryUser.Count);
        foreach (var x in queryUser)
        {
            if (x.AccountType == "Faculty")
            {
                x.UserID = "FCC" + currentVal;
                currentVal += random.Next(1, 6);
                Console.WriteLine($"write count: {writeCount} generated Value: {x.UserID}");
                mongo.UpsertRecord<AllUser>("allUser", x.Id, x);
                writeCount++;
            }

            if (currentVal >= 9999999)
            {
                currentVal = -99999;
            }

        }
        Console.WriteLine("table updated");
    }

    private void CreateIdsForAdminSemiRandom()
    {
        Random random = new Random();



        var queryUser = mongo.LoadRecordSortedAsc<AllUser>("allUser", "AccountType");
        Console.WriteLine("running CreateIdsForStudents");

        List<int> assigned = new List<int> { };
        bool flag = false;
        int currentVal = 1000000;
        int writeCount = 1;
        Console.WriteLine(queryUser.Count);
        foreach (var x in queryUser)
        {
            if (x.AccountType == "Admin")
            {
                x.UserID = "ACC" + currentVal;
                currentVal += random.Next(1, 6);
                Console.WriteLine($"write count: {writeCount} generated Value: {x.UserID}");
                mongo.UpsertRecord<AllUser>("allUser", x.Id, x);
                writeCount++;
            }

            if (currentVal >= 9999999)
            {
                currentVal = -99999;
            }

        }
        Console.WriteLine("table updated");
    }

    private void writeIDsForAllUsersSemiRandom()
    {
        CreateIdsForStudentsSemiRandom();
        CreateIdsForFacultySemiRandom();
        CreateIdsForAdminSemiRandom();
    }

    private void fixNullValuesForStudents()
    {
        var queryUser = mongo.LoadRecord<AllUser>("allUser");
        string[] partOrFullTime = { "Part Time", "Full Time" };
        string[] gradType = { "Graduate", "Undergraduate" };
        int rando = random.Next(0, 1);
        int rando2 = random.Next(0, 1);
        Console.WriteLine("running fixNullValuesForStudents");
        foreach (var x in queryUser)
        {
            if (x.AccountType == null)
            {
                rando = random.Next(0, 1);
                rando2 = random.Next(0, 1);
                x.AccountType = gradType[rando];
                x.PartOrFullTime = partOrFullTime[rando2];
                mongo.UpsertRecord<AllUser>("allUser", x.Id, x);

            }
        }
        Console.WriteLine("table updated");
    }



}