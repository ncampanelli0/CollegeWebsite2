@page "/undergraduate/degreeaudit22"

@major
<MudDataGrid Items="@toWriteMajorTable" MultiSelection="true" SortMode="SortMode.Multiple" Filterable="true" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
    <Columns>
        <PropertyColumn Title="Major Requirements" Property="x => x.majorRequirement" />
        <PropertyColumn Title="Grade Requirements" Property="x => x.majorGrade" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="DegreeAuditMajor" Class="tableFooter" />
    </PagerContent>
</MudDataGrid>

@code
{
    Mongo mongo = new Mongo("college-site-2");
    List<DegreeAuditMajor> toWriteMajorTable = new List<DegreeAuditMajor> { };
    List<DegreeAuditMinor> toWriteMinorTable = new List<DegreeAuditMinor> { };
    [Parameter][SupplyParameterFromQuery] public string major { get; set; }
    [Parameter][SupplyParameterFromQuery] public string minor { get; set; }
    [Parameter][SupplyParameterFromQuery] public string userID {get;set;}


    public class DegreeAuditMajor
    {
        public string major { get; set; }
        public string majorRequirement { get; set; }
        public string majorGrade { get; set; }
    }

    public class DegreeAuditMinor
    {
        public string minor { get; set; }
        public string minorRequirement { get; set; }
        public string minorGrade { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"{major} {minor} {userID}");
        var queryMajors = mongo.LoadRecordByString<Majors>("majors", "Major", major);
        var queryMinors = mongo.LoadRecordByString<Minors>("minors", "Minor", minor);

        DegreeAuditMinor toWriteMinor = new DegreeAuditMinor();
        Console.WriteLine($"a");

        for (int i = 0; i < queryMajors.GradeRequirements.Length; i++)
        {
            DegreeAuditMajor toWriteMajor = new DegreeAuditMajor();
            toWriteMajor.major = major;
            toWriteMajor.majorGrade = queryMajors.GradeRequirements[i];
            toWriteMajor.majorRequirement = queryMajors.MajorRequirements[i];

            toWriteMajorTable.Add(toWriteMajor);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

        }

    }






}