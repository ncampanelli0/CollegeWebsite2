@page "/undergraduate/signup"

@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar snackbar

<h2>Current Classes</h2>

<MudDataGrid Items="@queryClasses" MultiSelection="true" SortMode="SortMode.Multiple" Filterable="true"
    FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
    <Columns>
        <PropertyColumn Title="Department" Property="x => x.Department" />
        <PropertyColumn Title="Course Name" Property="x => x.CourseName" />
        <PropertyColumn Title="CRN" Property="x => x.CRN" />
        <PropertyColumn Title="Section" Property="x => x.Section" />
        <PropertyColumn Title="Professor Name" Property="x => x.ProfessorName" />
        <PropertyColumn Title="Start Date/Time" Property="x =>x.StartDate" />
        <PropertyColumn Title="End Date/Time" Property="x => x.EndDate" />
        <PropertyColumn Title="Period" Property="x => x.Period" />
        <PropertyColumn Title="Building ID" Property="x => x.BuildingID" />
        <PropertyColumn Title="Room ID" Property="x => x.RoomID" />
        <PropertyColumn Title="Day" Property="x => x.Day" />
        <PropertyColumn Title="Remaining Capacity" Property="x => x.MaxCapacity - x.Enrolled.Count" />

    </Columns>
    <PagerContent>
        <MudDataGridPager T="Classes" Class="tableFooter" />
    </PagerContent>
</MudDataGrid>

<h2>Add A Class</h2>

<MudNumericField @bind-Value="CRN" Label="CRN" Variant="Variant.Outlined" id="textFieldColor" Min="10000" Max="99999"></MudNumericField>
<MudButton @onclick="submitForm" Variant="Variant.Outlined" class="btncolor" Color="Color.Success">submit</MudButton>

@code
{
    class popTable
    {
        public string department { get; set; }
        public string courseName { get; set; }
        public int? CRN { get; set; }
        public string section { get; set; }
        public string professorName{ get; set; }
        public DateTime startDateTime{ get; set; }
        public DateTime endDateTime { get; set; }
        public string period { get; set; }
        public int? buildingID { get; set; }
        public int? roomID { get; set; }
        public string day { get; set; }
        public int remainingCapacity { get; set; }
    }

    Mongo mongo = new Mongo("college-site-2");
    List<popTable> pop = new List<popTable> { };
    List<Classes> queryClasses;
    private static int CRN { get; set; }
    string accountTypeString{ get; set; }
    [Parameter][SupplyParameterFromQuery] public string userIDString { get; set; }

    
    
    
    protected override async Task OnInitializedAsync()
{
    try
    {
        var accountTypeCheck = await storage.GetAsync<string>("accountType");
        var userIDCheck = await storage.GetAsync<string>("userID");
        
      if (accountTypeCheck.Value != "Undergraduate")
        {
            navigate.NavigateTo("/homepage");
        }
    }
    catch
        {
            navigate.NavigateTo("/homepage");
        }
    
    try 
    {
        queryClasses = mongo.LoadRecordFromClassesByYear<Classes>(2023);
        string accountTypeString = accountTypeCheck.Value;
        string userIDString = userIDCheck.Value;
        while (userIDString == null && accountTypeString == null)
        {
            Task.Delay(1000);
        }
    }
    



{
        if (validForm && sanityCheck)
        {
            Enrolled toWrite = new Enrolled();


            toWrite.FirstName = queryStudentID.FirstName;
            toWrite.LastName = queryStudentID.LastName; 
            toWrite.UserID = queryStudentID.UserID; 
            toWrite.Grades = new List<string> { };
            toWrite.Attendance = 0;
            toWrite.MidTermGrade = "none";
            toWrite.FinalGrade = "none";


            queryClassID.Enrolled.Add(toWrite);
            mongo.UpsertRecord<Classes>("classes", queryClassID.Id, queryClassID);
            snackbar.Add("User added to class successfully", Severity.Success);
        }
        else
        {
            snackbar.Add("User was not added to class successfully", Severity.Error);
        }
}
}

}