
@page "/undergraduate/signup2"
@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar snackbar

<h2>signup 2</h2>



@code
{
  
    private static string userIDCheck { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
         try
        {
        var accountTypeCheck = await storage.GetAsync<string>("accountType");
        var userIDCheck = await storage.GetAsync<string>("userID");

            if (accountTypeCheck.Value != "Undergraduate")
            {
                navigate.NavigateTo("/homepage");
            }
        }
        catch
        {
            navigate.NavigateTo("/homepage");
        }
        

        
        private void submitForm()
        {
    
        try
    {

        bool validForm = true;
        var queryClassID = mongo.LoadRecordByInt<Classes>("classes", "CRN", CRN);
        var queryStudentID = mongo.LoadRecordByString<AllUser>("allUser", "UserID", userIDString);
        //form validation
        if (CRN == 0 || !(CRN >= 10000 && CRN <= 99999) || CRN == null)
        {
            validForm = false; 
        }

        //sanity check
        bool sanityCheck = true;
        if (validForm)
        {
            int enrolledCreditCounter = 0;
            foreach (var x in queryClasses)
            {
                foreach (var y in x.Enrolled)
                {
                    if (y.UserID == queryStudentID.UserID && (queryClassID.StartDate.Year == x.StartDate.Year && queryClassID.Semester== x.Semester))
                    {
                        enrolledCreditCounter += x.Credits;
                    }
                }
            }

            foreach (var x in queryClassID.Enrolled)
            {
                if (userIDString == x.UserID)
                {
                    sanityCheck = false;
                }
            }

            if (DateTime.Now.ToLocalTime() < queryClassID.RegistrationLimit.ToLocalTime())
            {
                sanityCheck = false;
            }
            else if ((enrolledCreditCounter >= 16 && queryStudentID.PartOrFullTime == "Full Time") || (enrolledCreditCounter >= 8 && queryStudentID.PartOrFullTime == "Part Time"))
            {
                sanityCheck = false;
            }
            else if (queryClassID.MaxCapacity < queryClassID.Enrolled.Count)
            {
                sanityCheck = false;
            }
            else if (queryStudentID.Holds != "None")
            {
                sanityCheck = false;
            }
        }
    
        if (validForm && sanityCheck)
        {
            await Task.Delay(5000);
            navigate.NavigateTo($"/undergraduate/signup?userID={userIDCheckString}&accountType={accountTypeString}");
        }
        else
            {
                snackbar.Add("Class could not be added", Severity.Error);
            }
    }
        catch
        {
            snackbar.Add("Class could not be added", Severity.Error);
        }   
        } 
        string userIDCheckString = userIDCheck.Value;
        string accountTypeString = accountTypeCheck.Value;
    }
}