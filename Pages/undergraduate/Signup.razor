@page "/undergraduate/signup"

@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar snackbar

<h2>Classes</h2>

<MudDataGrid Items="@queryClasses" MultiSelection="true" SortMode="SortMode.Multiple" Filterable="true" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
    <Columns>
        <PropertyColumn Title="Department" Property="x => x.Department" />
        <PropertyColumn Title="Course Name" Property="x => x.CourseName" />
        <PropertyColumn Title="CRN" Property="x => x.CRN" />
        <PropertyColumn Title="Section" Property="x => x.Section" />
        <PropertyColumn Title="Professor Name" Property="x => x.ProfessorName" />
        <PropertyColumn Title="Start Date/Time" Property="x =>x.StartDate" />
        <PropertyColumn Title="End Date/Time" Property="x => x.EndDate" />
        <PropertyColumn Title="Period" Property="x => x.Period" />
        <PropertyColumn Title="Building ID" Property="x => x.BuildingID" />
        <PropertyColumn Title="Room ID" Property="x => x.RoomID" />
        <PropertyColumn Title="Day" Property="x => x.Day" />
        <PropertyColumn Title="Remaining Capacity" Property="x => x.MaxCapacity - x.Enrolled.Count" />

    </Columns>
    <PagerContent>
        <MudDataGridPager T="Classes" />
    </PagerContent>
</MudDataGrid>

<h2>Add A Class</h2>

<MudTextField @bind-Value="CRN" Label="CRN" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="userID" Label="userID" Variant="Variant.Outlined"></MudTextField>

<MudButton @onclick="submitForm" Variant="Variant.Outlined" Color="Color.Success">submit</MudButton>

@code
{
  protected override async Task OnInitializedAsync()
    {
        var accountTypeCheck = await storage.GetAsync<string>("accountType");

        if (accountTypeCheck.Value != "Undergraduate")
        {
            navigate.NavigateTo("/homepage");
        }
    }

    Mongo mongo = new Mongo("college-site-2");
    List<Classes> queryClasses;
    List<TimeWindow> queryTime;

    protected override async Task OnInitializedAsync()
    {
        queryClasses = mongo.LoadRecord<Classes>("classes");
        queryTime = mongo.LoadRecord<TimeWindow>("timeWindow");
    }

private void submitForm()
    {
        bool validForm = true;

        if ((userID == null || userID == "") && !(userID.Contains("SCC")))
        {
            validForm = false;
        }
        else if (CRN == null || CRN == "")
        {
            validForm = false;
        }

        if (validForm)
        {
            var queryClassesID = mongo.LoadRecordByString<Classes>("classes", "CRN", CRN);
            var queryUserID = mongo.LoadRecordByString<AllUser>("allUser", "UserID", userID);

            Registered toWrite = new Registered();

            toWrite.FirstName = queryUserID.FirstName;
            toWrite.LastName = queryUserID.LastName;
            toWrite.UserID = queryUserID.UserID;
            toWrite.Grades = new List<string> { };
            toWrite.Attendance = 0;
            toWrite.MidTermGrade = "none";
            toWrite.FinalGrade = "none";

            queryClassesID.Enrolled.Add(toWrite);

            mongo.UpsertRecord<Classes>("classes", queryClassesID.Id, queryClassesID);
            snackbar.Add("User added to class successfully", Severity.Success);
        }
        else
        {
            snackbar.Add("User was not added to class", Severity.Error);
        }

    }
    
}