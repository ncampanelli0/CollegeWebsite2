@page "/graduate/dropclass"


@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar snackbar

<h2>Drop A Class</h2>

<MudTextField @bind-Value="CRN" Label="CRN" Variant="Variant.Outlined"></MudTextField>

<MudButton @onclick="submitForm" Variant="Variant.Outlined" Color="Color.Success">submit</MudButton>
<MudTextField @bind-Value="userID" Label="userID" Variant="Variant.Outlined"></MudTextField>


@code
{
    protected override async Task OnInitializedAsync()
    {
        var accountTypeCheck = await storage.GetAsync<string>("accountType");

        if (accountTypeCheck.Value != "Graduate")
        {
            navigate.NavigateTo("/homepage");
        }
    }
    private static string CRN { get; set; }

    private void submitForm()
    {
        bool validForm = true;

        if ((userID == null || userID == "") && !(userID.Contains("SCC")))
        {
            validForm = false;
        }

        if (CRN == null)
        {
            validForm = false;
        }

        if (validForm)
        {
            var queryClassesID = mongo.LoadRecordByInt<Classes>("classes", "CRN", CRN);
            var queryAllUserID = mongo.LoadRecordByString<AllUser>("allUser", "UserID", userID);

            for (int w = 0; w < queryClassesID.Enrolled.Count; w++)
            {
                if (queryClassesID.Enrolled[i].UserID.Contains(userID))
                {
                    queryClassesID.Enrolled.RemoveAt(w);
                    snackbar.Add("User has been removed from class", Severity.Success);
                }
                else
                {
                    snackbar.Add("User is not found", Severity.Warning);
                }
            }
        }
        else
        {
            snackbar.Add("User has been not removed from class", Severity.Error);
        }
    }

}
