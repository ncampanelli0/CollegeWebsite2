@page "/graduate/adjustlogin"

@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar snackbar

<h2>Adjust User Login</h2>

<MudTextField @bind-Value="email" Label="email" Variant="Variant.Outlined" id="textFieldColor"></MudTextField>
<MudButton @onclick="submitForm" Variant="Variant.Outlined" Color="Color.Success" Class="btncolor">submit</MudButton>


@code {

    Mongo mongo = new Mongo("college-site-2");

    bool validForm = true;

    private static string email { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var accountTypeCheck = await storage.GetAsync<string>("accountType");

        if (accountTypeCheck.Value != "Graduate")
        {
            navigate.NavigateTo("/homepage");
        }
    }

        private string createPassword()
    {
        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var stringChars = new char[8];
        var random = new Random();

        for (int i = 0; i < 8; i++)
        {
            stringChars.Append(chars[random.Next(chars.Length)]);
        }

        return stringChars.ToString();
    }
    private void submitForm()
    {
        try
        {
            if (email == null || email == "")
            {
                validForm = false;
                snackbar.Add("Email error", Severity.Error);
            }

            bool thealmightycheck = true;

            if (validForm && thealmightycheck)
            {
                Mailtrap mail = new Mailtrap();
                var queryAllUser = mongo.LoadRecordByString<AllUser>("allUser", "Email", email);
                string newestPassword = createPassword();

                queryAllUser.Password = newestPassword;
                mongo.UpsertRecord<AllUser>("allUser", queryAllUser.Id, queryAllUser);
                mail.sendMail("Student@clearwater.edu", email, "Password has been reset", $"new password is: {newestPassword}");
                snackbar.Add("Password reset was sent", Severity.Success);
            }
            else
            {
                snackbar.Add("Password reset was not able to be sent", Severity.Error);
            }
        }
        catch
        {
            snackbar.Add("Password reset was not able to be sent", Severity.Error);
        }
    }
}
