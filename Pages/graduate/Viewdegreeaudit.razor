@page "/graduate/viewdegreeaudit"

@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar Snackbar

<MudDataGrid Items="@major" MultiSelection="true" SortMode="SortMode.Multiple" Filterable="true" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
    <Columns>
        <PropertyColumn Title="Class Name" Property="x => x.className" />
        <PropertyColumn Title="Grade Requirement" Property="x => x.gradeRequirement" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Major" />
    </PagerContent>
</MudDataGrid>

<MudDataGrid Items="@minor" MultiSelection="true" SortMode="SortMode.Multiple" Filterable="true" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
    <Columns>
        <PropertyColumn Title="Class Name" Property="x => x.className" />
        <PropertyColumn Title="Grade Requirement" Property="x => x.gradeRequirement" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Minor" />
    </PagerContent>
</MudDataGrid>


@code
{
    protected override async Task OnInitializedAsync()
    {
        var accountTypeCheck = await storage.GetAsync<string>("accountType");

        if (accountTypeCheck.Value != "Graduate")
        {
            navigate.NavigateTo("/homepage");
        }
    }
    Mongo mongo = new Mongo("college-site-2");
    List<Major> major = new List<Major> { };
    List<Minor> minor = new List<Minor> { };

    protected override async Task OnInitializedAsync()
    {
        populateTableMajor();
        populateTableMinor();
    }

    public class Major
    {
        public string className { get; set; }
        public string gradeRequirement { get; set; }
    }

    public class Minor
    {
        public string className { get; set; }
        public string gradeRequirement { get; set; }
    }


    public async Task populateTableMajor()
    {
        var userMajor = await storage.GetAsync<ObjectId>("major");
        var queryMajor = mongo.LoadRecordById<Majors>("majors", userMajor.Value);

        for (int i = 0; i < queryMajor.MajorRequirements.Length; i++)
        {
            Major y = new Major();

            y.className = queryMajor.MajorRequirements[i];
            y.gradeRequirement = queryMajor.GradeRequirements[i];

            major.Add(y);
        }
    }

    public async Task populateTableMinor()
    {
        var userMinor = await storage.GetAsync<ObjectId>("minor");
        var queryMinor = mongo.LoadRecordById<Minors>("minors", userMinor.Value);

        for (int i = 0; i < queryMinor.MinorRequirements.Length; i++)
        {
            Minor y = new Minor();

            y.className = queryMinor.MinorRequirements[i];
            y.gradeRequirement = queryMinor.GradeRequirements[i];

            minor.Add(y);
        }
    }



}