@page "/"
@page "/homepage"
@inject ProtectedLocalStorage storage
@inject NavigationManager navigate
@inject ISnackbar Snackbar


<MudCarousel Style="height:350px;" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" TData="object">
    <MudCarouselItem>
        <img src="homepageimage/homepage3.jpg" class="caraousel" alt="slide1">
    </MudCarouselItem>

    <MudCarouselItem>
        <img src="homepageimage/homepageimage2.jpg" class="caraousel" alt="slide2">
    </MudCarouselItem>

    <MudCarouselItem>
        <img src="homepageimage/homepageimage3.jpg" class="caraousel" alt="slide3">
    </MudCarouselItem>
</MudCarousel>
<br /><br />






    <section class="center">
        <div class="contentbody content">
            <h6>Clearwater</h6>
            <h6>Clearwater</h6>
        </div>

        <div class="contentbody content">
            <h6>Community</h6>
            <h6>Community</h6>
        </div>

        <div class="contentbody content">
            <h6>College</h6>
            <h6>College</h6>
        </div>
    </section>
    <div>


        @if (loginStudent)
        {

            <MudExpansionPanels>
                <MudExpansionPanel Text="Account Information" Class="panels">
                Account Type: @accountType <br/>
                Email: @email <br/>
                Name: @name <br/>
                Address: @address <br/>
                Phone Number: @phoneNumber <br/>
                Advisor: @advisor <br/>
                Major: @major <br/>
                Minor: @minor <br/>
                Hold Status: @holdStatus <br/>
                User ID: @userID <br/>
            </MudExpansionPanel>
        </MudExpansionPanels>
        }

        @if (loginFaculty)
        {
        <MudExpansionPanels>
            <MudExpansionPanel Text="Account Information" Class="panels">
                Account Type: @accountType <br/>
                Email: @email <br/>
                Name: @name <br/>
                Address: @address <br/>
                Phone Number: @phoneNumber <br/>
                Department: @department <br/>
                User ID: @userID <br/>
            </MudExpansionPanel>
        </MudExpansionPanels>
        }
        
        @if (loginAdmin)
        {

            <MudExpansionPanels>
                <MudExpansionPanel Text="Account Information" Class="panels">
                Account Type: @accountType <br/>
                Email: @email <br/>
                Name: @name <br/>
                Address: @address <br/>
                Phone Number: @phoneNumber <br/>
                User ID: @userID <br/>
            </MudExpansionPanel>
        </MudExpansionPanels>
        }
        <br /><br />

    </div>
 
    <MudExpansionPanels >
    <MudExpansionPanel Text="August" Class="panels">
            <ol>
                <li> 22-Aug Advising for all students </li>
                <li> 27-Aug Residence Hall for all new students(First-year and Transfer) </li>
                <li> 28-Aug Residence Hall Open for all returning students </li>
                <li> 31-Aug Add/Drop (no fee) Late Registration ($50 fee) </li>
                <li> 31-Aug First Day of Classes </li>
            </ol>
        </MudExpansionPanel>

    <MudExpansionPanel Text="Septemeber" Class="panels">
            <ol>
                <li>5-Sep Labor Day-no classes offices closed</li>
                <li>7-Sep Club Bash </li>
            </ol>
        </MudExpansionPanel>

    <MudExpansionPanel Text="October" Class="panels">
            <ol>
                <li>3-Oct Last day to apply for Graduation for Fall 2022 and Winter 2023</li>
                <li>3-Oct Advising begins</li>
                <li>10-Oct Indigenous People's Day/Columbus Day-no classes, offices closed</li>
                <li>2-Oct Midterm Week</li>
                <li>19-Oct Last day to file for W or Cr/NC</li>
                <li>21-Oct Mid-term advisory grades due </li>
            </ol>
        </MudExpansionPanel>

    <MudExpansionPanel Text="November" Class="panels">
            <ol>
                <li>1-Nov Spring 2023 Registration for Seniors on the Web</li>
                <li>7-Nov Spring 2023 Registration for Juniors on the Web</li>
                <li>8-Nov Election Day-classes in session</li>
                <li>11-Nov Spring 2023 Registration for Sophmores on the Web</li>
                <li>11-Nov Veterans day-classes in session</li>
                <li>16-Nov Spring 2023 Registration for First-Years on the Web</li>
                <li>17-Nov Continuing Registration for Spring 2023 for all students on the Web</li>
                <li>23-Nov Dining Hall Closes After Dinner</li>
                <li>24-Nov Thanksgiving Recess-no classes</li>
                <li>27-Nov Dining Hall Reopens for dinner</li>
                <li>28-Nov Classes Resume </li>
            </ol>
        </MudExpansionPanel>

    <MudExpansionPanel Text="December" Class="panels">
            <ol>
                <li>13-Dec Study/Make-up Days</li>
                <li>15-Dec Final Exams(grades due to Registrar 48 hours after scheduled final examination period)</li>
                <li>21-Dec Residence Hall close after final last exam</li>
                <li>21-Dec Fall Semester Ends after last Examination</li>
            </ol>
        </MudExpansionPanel>
    </MudExpansionPanels>


@code
{
    Mongo mongo = new Mongo("college-site-2");
    bool loginStudent;
    bool loginFaculty;
    bool loginAdmin;
    string accountType;
    string email;
    string name;
    string address;
    string phoneNumber;
    string advisor;
    string major;
    string minor;
    string holdStatus;
    string department;
    string userID;



    protected override async Task OnInitializedAsync()
    {
        var accountTypeCheck = await storage.GetAsync<string>("accountType");
        var emailCheck = await storage.GetAsync<string>("email");
        var firstNameCheck = await storage.GetAsync<string>("firstName");
        var lastNameCheck = await storage.GetAsync<string>("lastName");
        var addressCheck = await storage.GetAsync<string>("address");
        var phoneNumberCheck = await storage.GetAsync<string>("phoneNumber");
        var advisorCheck = await storage.GetAsync<string>("advisor");
        var majorCheck = await storage.GetAsync<string>("major");
        var minorCheck = await storage.GetAsync<string>("minor");
        var holdStatusCheck = await storage.GetAsync<string>("holdStatus");
        var departmentCheck = await storage.GetAsync<string>("department");
        var userIDCheck = await storage.GetAsync<string>("userID");


        //var queryAdvisor = mongo.LoadRecordById<Advisor>("advisor", (BsonObjectId)advisorCheck.Value);
        //var queryMajor = mongo.LoadRecordById<Majors>("majors", (BsonObjectId)majorCheck.Value);
        //var queryMinor = mongo.LoadRecordById<Minors>("minors", (BsonObjectId)minorCheck.Value);





        if (accountTypeCheck.Value == "Graduate" || accountTypeCheck.Value == "Undergraduate")
        {
            loginStudent = true;
            accountType = accountTypeCheck.Value;
            email = emailCheck.Value;
            name = firstNameCheck.Value + " " + lastNameCheck.Value;
            address =  addressCheck.Value;
            phoneNumber = phoneNumberCheck.Value;
            advisor = advisorCheck.Value;
            major = majorCheck.Value;
            minor = minorCheck.Value;
            holdStatus = holdStatusCheck.Value;
            userID = userIDCheck.Value;
        }
        else
        {
            loginStudent = false;
        }

        if (accountTypeCheck.Value == "Faculty")
        {
            loginFaculty = true;
            accountType = accountTypeCheck.Value;
            email = emailCheck.Value;
            name = firstNameCheck.Value + " " + lastNameCheck.Value;
            address = addressCheck.Value;
            phoneNumber = phoneNumberCheck.Value;
            department = departmentCheck.Value;
            userID = userIDCheck.Value;
        }
        else
        {
            loginFaculty = false;
        }

        if (accountTypeCheck.Value == "Admin")
        {
            loginAdmin = true;
            accountType = accountTypeCheck.Value;
            email = emailCheck.Value;
            name = firstNameCheck.Value + " " + lastNameCheck.Value;
            address = addressCheck.Value;
            phoneNumber = phoneNumberCheck.Value;
            userID = userIDCheck.Value;
        }
        else
        {
            loginAdmin = false;
        }


    }
}